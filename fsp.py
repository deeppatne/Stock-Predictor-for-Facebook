# -*- coding: utf-8 -*-
"""fsp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-RaUtF2Lx0mhc6UuqkpBeybIhUU1FZgw
"""

# Importing required libraries
import pandas as pd
import numpy as np
from sklearn.svm import SVR
import matplotlib.pyplot as plt

#Loading data
from google.colab import files # Use to load data on Google Colab
uploaded = files.upload() # Use to load data on Google Colab
df = pd.read_csv('FB_30_days.csv')
df.head(7)

# Creating lists for X and Y axis
dates = []
prices = []

# No of rows and coluumns
df.shape

# Printing the last row
df.tail(1)

# Storing data in df except the last row (cause we want to predict it)
df = df.head(len(df)-1)
print(df.shape)

# Getting rows from Date column
df_dates = df.loc[:,'Date']
#Getting rows from the Open column
df_open = df.loc[:,'Open']

# Independent data on X axis as Dates
for date in df_dates:
  dates.append( [int(date.split('-')[2])] ) #Taking only the Date ie 31
  
# Dependent data on Y axis as Prices
for open_price in df_open:
  prices.append(float(open_price))

# Data stored in Dates
print(dates)

#Function to make predictions - taking 3 parameters - x = date on which prediction has to be made
def predict_prices(dates, prices, x):
  
  #Creating 3 Support Vector Regression Models
  svr_lin = SVR(kernel='linear', C=1e3)
  svr_poly = SVR(kernel='poly', C=1e3, degree=2)
  svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.1)
  
  #Training the models based on parameters provided
  svr_lin.fit(dates,prices)
  svr_poly.fit(dates, prices)
  svr_rbf.fit(dates, prices)
  
  # Plotting the models on a graph
  plt.scatter(dates, prices, color = 'black', label='Data')
  plt.plot(dates, svr_rbf.predict(dates), color = 'red', label='RBF model')
  plt.plot(dates, svr_lin.predict(dates), color = 'blue', label='Linear model')
  plt.plot(dates, svr_poly.predict(dates), color = 'green', label='Polynomial model')
  plt.xlabel('Date')
  plt.ylabel('Price')
  plt.title('Support Vector Regression')
  plt.legend()
  plt.show()
  
  # Returning the predicted models
  return svr_rbf.predict(x)[0], svr_lin.predict(x)[0], svr_poly.predict(x)[0]

# Price of FB on Day 31
predicted_price = predict_prices(dates, prices, [[31]])

# Now displaying the model
print(predicted_price)

# From the above graph we can observe that RBF model predicts the data with best accuracy as compared with other models